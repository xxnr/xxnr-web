'use strict';

var database = require("./database");
var config = require('../../../configuration/mongoose_config');
var mongoose = require('mongoose'), Schema = mongoose.Schema;

mongoose.connect(config.db[config.environment],{user:'xxnr',pass:'xxnr001'});
/* var db       = mongoose.createConnection('mongodb://127.0.0.1:27017');
// 链接错误
db.on('error', function(error) {
    console.log(error);
});
*/

module.exports = class mongoDB extends database{
	constructor(name, schema){
		super(name, database.MONGO_DB);

		schema = new Schema(schema);

		schema.post('save', function (doc) {
  			// console.log('this fired after a document was saved');
		});

		this.model = mongoose.model(name, schema);
	}

    insert(object, callback)
    {
        var model = new this.model(object);

        return model.save(callback || function (err) {
            if(err){
                console.log(`failed to insert object ${JSON.stringify(object)}, and error is ${err}`);
            }
        });
    }

    remove(options, callback)
    {
        if(typeof options === 'function'){
            throw new Error('Unexpected!');
        }

        this.model.find(options.query||options).remove(function(err){
            if(callback)
                callback(err);
        });
    }

	update(options, object, callback)
    {  // insert/update/delete
        if (typeof options === 'function' || !options.query || !options.operator) {
            throw new Error('Unexpected!');
        }

        if(!callback){
            callback = object;
        }

        this.model.update(options.query, options.operator, options.options, function (err, numAffected) {
            if(callback)
                callback(err, numAffected.n);
        });
    }
	
	one(options, callback){
        if(typeof options === 'function') {
            throw new Error('Unexpected!');
        }

        var query = this.model.findOne(options.query || options);
        if(options && options.populate && options.populate instanceof Array){
            for (var i=0; i<options.populate.length; i++){
                query = query.populate(options.populate[i]);
            }
        }
        query.exec(this.transformCallback(callback));
    }

	all(options, orderby, callback, skip, take){
		if(!callback){
			callback = orderby;
			orderby = undefined;
		} 

		var cb = callback;

		if(typeof orderby === 'function' || typeof options === 'function' ) {
            throw new Error('Unexpected');
        }

        var queryOptions = {$query:(options.query||options)};
        if(orderby && orderby.orderby) {
            queryOptions.$orderby = orderby.orderby;
        }

        if(options.projection){
            var query = this.model.find(queryOptions, options.projection);
        }else{
            var query = this.model.find(queryOptions);
        }

		if(skip){
            query = query.skip(skip);
		}

		if(take){
            query = query.limit(take);
		}

        var transformedCallback = this.transformCallback(function(err, docs, count){
            callback(err, docs||[], count);
        });

        this.model.count(queryOptions.$query, function(err, count){
            query.exec(function(err, docs){
                transformedCallback(err, docs, count)
            });
        })
	}

	clear(callback, description){
		this.model.find({}).remove(callback || function(err){});
	}

	transform(data){
        if(!data){
			return data;
		}

		if(data instanceof Array){
			var transformedData = new Array(data.length);

			for(var i=0; i<data.length; i++){
				transformedData[i] = data[i]._doc || data[i];
			}

			return transformedData;
		}
		else{
			data = data._doc || data;
		}

		return data;
	}

	transformCallback(callback){
		var transform = this.transform;

		return function(err, data, count){
			return callback(err, transform(data), count);
		};
	}

	aggregate(){
		this.model.aggregate.apply(this.model, arguments);
	}
};